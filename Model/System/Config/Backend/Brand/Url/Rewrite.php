<?php

declare(strict_types=1);

namespace Blacksheep\Brand\Model\System\Config\Backend\Brand\Url;

use Blacksheep\Brand\Model\BrandUrlPathGenerator;
use Magento\Framework\App\Cache\TypeListInterface;
use Magento\Framework\App\Config as AppConfig;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;
use Magento\Store\Model\ScopeInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Helper\UrlRewrite as UrlRewriteHelper;
use Magento\UrlRewrite\Model\Storage\DbStorage;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;

class Rewrite extends \Magento\Framework\App\Config\Value
{
    private ?AppConfig $appConfig = null;

    public function __construct(
        Context $context,
        Registry $registry,
        ScopeConfigInterface $config,
        TypeListInterface $cacheTypeList,
        protected UrlRewriteHelper $urlRewriteHelper,
        private ResourceConnection $resourceConnection,
        private UrlFinderInterface $urlFinder,
        private StoreManagerInterface $storeManager,
        ?AbstractResource $resource = null,
        ?AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct(
            $context,
            $registry,
            $config,
            $cacheTypeList,
            $resource,
            $resourceCollection,
            $data
        );
    }

    public function afterSave()
    {
        if (!$this->isValueChanged()) {
            return parent::afterSave();
        }

        if ($this->isBrandPrefixChanged() || $this->isBrandSuffixChanged()) {
            $this->cacheTypeList->invalidate([
                \Magento\Framework\App\Cache\Type\Block::TYPE_IDENTIFIER,
                \Magento\Framework\App\Cache\Type\Collection::TYPE_IDENTIFIER,
            ]);
        }

        return parent::afterSave();
    }

    protected function updateForUrlRewrites(array $map): void
    {
        if (!isset($map[$this->getPath()])) {
            return;
        }

        $dataFilter = [UrlRewrite::ENTITY_TYPE => $map[$this->getPath()]];
        $storesIds = $this->getStoreIds();
        if ($storesIds) {
            $dataFilter[UrlRewrite::STORE_ID] = $storesIds;
        }
        $entities = $this->urlFinder->findAllByData($dataFilter);
        if ($this->getValue() !== null) {
            $value = $this->getValue();
        } else {
            $this->getAppConfig()->clean();
            $value = $this->_config->getValue($this->getPath());
        }

        if ($value && $this->getPath() == BrandUrlPathGenerator::XML_PATH_BRAND_URL_PREFIX) {
            $value .= '/';
        }

        $connection = $this->resourceConnection->getConnection();
        foreach ($entities as $urlRewrite) {
            $bind = $urlRewrite->getIsAutogenerated()
                ? [UrlRewrite::REQUEST_PATH => $this->getUrlPath($value, $urlRewrite->getRequestPath())]
                : [UrlRewrite::TARGET_PATH => $this->getUrlPath($value, $urlRewrite->getTargetPath())];
            $connection->update(
                $connection->getTableName(DbStorage::TABLE_NAME),
                $bind,
                $connection->quoteIdentifier(UrlRewrite::URL_REWRITE_ID) . ' = ' . $urlRewrite->getUrlRewriteId()
            );
        }
    }

    protected function getUrlPath(string $value, string $path): string
    {
        return preg_replace($this->getPattern(), $value, $path);
    }

    protected function getPattern(): string
    {
        return '';
    }

    private function isBrandSuffixChanged(): bool
    {
        return $this->isValueChanged() && ($this->getPath() == BrandUrlPathGenerator::XML_PATH_BRAND_URL_SUFFIX);
    }

    private function isBrandPrefixChanged(): bool
    {
        return $this->isValueChanged() && ($this->getPath() == BrandUrlPathGenerator::XML_PATH_BRAND_URL_PREFIX);
    }

    private function getStoreIds(): array
    {
        if ($this->getScope() === 'stores') {
            return [$this->getScopeId()];

        }

        if ($this->getScope() === 'websites') {
            $website = $this->storeManager->getWebsite($this->getScopeId());
            $storeIds = array_keys($website->getStoreIds());

            return array_diff($storeIds, $this->getOverrideStoreIds($storeIds));
        }

        $storeIds = array_keys($this->storeManager->getStores());

        return array_diff($storeIds, $this->getOverrideStoreIds($storeIds));
    }

    private function getOverrideStoreIds(array $storeIds): array
    {
        $excludeIds = [];
        foreach ($storeIds as $storeId) {
            $suffix = $this->_config->getValue($this->getPath(), ScopeInterface::SCOPE_STORE, $storeId);
            if ($suffix != $this->getOldValue()) {
                $excludeIds[] = $storeId;
            }
        }

        return $excludeIds;
    }

    private function getAppConfig(): AppConfig
    {
        if ($this->appConfig === null) {
            $this->appConfig = ObjectManager::getInstance()->get(AppConfig::class);
        }

        return $this->appConfig;
    }
}
