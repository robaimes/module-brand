<?php

declare(strict_types=1);

namespace Blacksheep\Brand\Model\ResourceModel\Brand\Sitemap;

use Blacksheep\Brand\Model\Brand\Image\UrlBuilder;
use Blacksheep\Brand\Model\BrandFactory;
use Blacksheep\Brand\Model\BrandUrlRewriteGenerator;
use Blacksheep\Brand\Model\Config;
use Blacksheep\Brand\Model\Config\Source\IncludeImage;
use Blacksheep\Brand\Model\Config\Source\Status;
use Magento\Framework\DataObject;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Magento\Framework\Model\ResourceModel\Db\Context;
use Magento\Store\Model\Store;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;

class Brand extends AbstractDb
{
    public function __construct(
        Context $context,
        private BrandFactory $brandFactory,
        private Config $config,
        private UrlFinderInterface $urlFinder,
        private UrlBuilder $imageUrlBuilder,
        $connectionName = null
    ) {
        parent::__construct($context, $connectionName);
    }

    protected function _construct()
    {
        $this->_init('catalog_brand_entity', 'entity_id');
    }

    public function getCollection(int $storeId): array
    {
        $connection = $this->getConnection();

        $select = $connection->select()->from(
            ['e' => $this->getMainTable()],
            [$this->getIdFieldName(), 'name', 'logo', 'url_key', 'updated_at', 'status']
        );
        $select->joinLeft(
            ['url_rewrite' => $this->getTable('url_rewrite')],
            'e.entity_id = url_rewrite.entity_id AND url_rewrite.is_autogenerated = 1'
            . $connection->quoteInto(' AND url_rewrite.store_id IN (?)', [Store::DEFAULT_STORE_ID, $storeId])
            . $connection->quoteInto(' AND url_rewrite.entity_type = ?', BrandUrlRewriteGenerator::ENTITY_TYPE),
            ['url' => 'request_path']
        );
        $select->where('status = ?', Status::STATUS_ACTIVE);

        $brands = [];
        $lastUpdatedAt = null;
        $query = $connection->query($select);
        while ($row = $query->fetch()) {
            $updatedAt = $row['updated_at'];
            if (!$lastUpdatedAt || $lastUpdatedAt < $updatedAt) {
                $lastUpdatedAt = $updatedAt;
            }

            $brand = $this->prepareBrand($row, $storeId);
            $brands[$brand->getEntityId()] = $brand;
        }

        $rewrite = $this->getRewrite('catalog/brand/list', $storeId);
        $brands[0] = $this->prepareBrand([
            'entity_id' => 0,
            'name' => '',
            'logo' => '',
            'url_key' => '',
            'updated_at' => $lastUpdatedAt,
            'status' => Status::STATUS_ACTIVE,
            'url' => $rewrite ? $rewrite->getRequestPath() : '',
        ], $storeId);

        return $brands;
    }

    private function prepareBrand(array $brandRow, int $storeId): DataObject
    {
        $brand = new DataObject();

        $brand->addData($brandRow);
        $brand->setId($brandRow[$this->getIdFieldName()]);
        $brand->setUrl($brandRow['url'] ?? 'catalog/brand/view/brand_id/' . $brand->getId());
        $brand->setUpdatedAt($brandRow['updated_at']);

        $this->loadBrandImages($brand, $storeId);

        return $brand;
    }

    private function loadBrandImages(DataObject $brand, int $storeId): void
    {
        /** @var \Blacksheep\Brand\Model\Brand $emptyBrand */
        $emptyBrand = $this->brandFactory->create();
        $imagesCollection = [];
        $imageIncludePolicy = $this->config->getBrandImageIncludePolicy($storeId);
        if (IncludeImage::INCLUDE_ALL === $imageIncludePolicy) {
            if ($brand->getLogo()) {
                $imagesCollection = [new DataObject(['url' => $emptyBrand->getLogoUrl() . $brand->getLogo()])];
            }
        }

        if ($imagesCollection) {
            $brand->setData('images', new DataObject([
                'collection' => $imagesCollection,
                'title' => $brand->getName(),
                'thumbnail' => $this->getBrandImageUrl($brand->getLogo()),
            ]));
        }
    }

    private function getBrandImageUrl($image): string
    {
        return $this->imageUrlBuilder->getUrl($image, 'brand_main_image');
    }

    private function getRewrite(string $targetPath, int $storeId): ?UrlRewrite
    {
        return $this->urlFinder->findOneByData([
            UrlRewrite::TARGET_PATH => ltrim($targetPath, '/'),
            UrlRewrite::STORE_ID => $storeId,
        ]);
    }
}
